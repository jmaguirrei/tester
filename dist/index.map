{"version":3,"sources":["utils/getUnits.js","utils/countTests.js","utils/formatters.js","utils/produceTestReport.js","utils/runTests.js","utils/walkDirectory.js","index.js"],"names":["module","exports","testingFilePaths","map","filePath","folderPath","split","fileName","substr","lastIndexOf","testsContainerObject","require","default","runnables","Object","keys","key","name","testToRun","tests","reduce","acum","testItem","length","verticalSpace","lines","i","console","log","horizontalLine","color","width","process","stdout","columns","line","centered","str","leftPadding","Math","floor","item","desc","padding","formatters","red","keyPath","limit","successes","errors","now","Date","toJSON","dateStr","toUpperCase","String","padStart","group","forEach","testError","counterAsText","error","groupName","actual","expected","dir","colors","depth","groupEnd","countTests","produceTestReport","green","units","counter","lastFolderPath","testFile","push","fs","path","patterns","includeDir","includeFile","excludeDir","shouldBeIncluded","isDirExcluded","value","indexOf","isDirIncluded","isFileIncluded","readdirAsync","Promise","resolve","reject","readdir","err","list","statAsync","file","stat","walkDir","then","all","solvedFile","isDirectory","results","Array","prototype","concat","apply","catch","getUnits","runTests","walkDirectory","init","pathsObject","homePath"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["\n// Dependencies\n\nmodule.exports = function getUnits(testingFilePaths) {\n\n  return testingFilePaths.map(filePath => {\n\n    const folderPath = filePath.split('__tests__')[0];\n    const fileName = filePath.substr(filePath.lastIndexOf('/') + 1, 1000);\n    const testsContainerObject = require(filePath).default;\n\n    const runnables = Object.keys(testsContainerObject).map(key => {\n      return {\n        name: key,\n        testToRun: testsContainerObject[key],\n      };\n    });\n    return {\n      folderPath,\n      fileName,\n      runnables,\n    };\n  });\n\n\n};\n\n","\n\n\n// Count all the tests\nmodule.exports = function countTests(tests) {\n\n  return tests.reduce((acum, testItem) => {\n    const { runnables } = testItem;\n    return acum + runnables.length;\n  }, 0);\n\n};\n\n","\n\nmodule.exports = {\n\n  // Create a vertical space\n  verticalSpace(lines = 1) {\n    for (let i = 0; i < lines; i++) {\n      console.log('');\n    }\n  },\n\n  // Create a horizontal line across the screen\n  horizontalLine(color) {\n\n    // Get the available screen size\n    const width = process.stdout.columns;\n\n    // Put in enough dashes to go across the screen\n    let line = '';\n    for (let i = 0; i < width; i++) {\n      line += '-';\n    }\n    if (color) console.log(color, line);\n    if (!color) console.log(line);\n\n  },\n\n  // Create centered text on the screen\n  centered(str = '', color) {\n\n    if (str.length > 0) {\n\n      // Get the available screen size\n      const width = process.stdout.columns;\n\n      // Calculate the left padding there should be\n      const leftPadding = Math.floor((width - str.length) / 2);\n\n      // Put in left padded spaces before the string itself\n      let line = '';\n      for (let i = 0; i < leftPadding; i++) {\n        line += ' ';\n      }\n      line += str;\n      if (color) console.log(color, line);\n      if (!color) console.log(line);\n    }\n\n  },\n\n  // 2 columns with padding\n  columns(item, desc) {\n    let line = item;\n    const padding = 60 - item.length;\n    for (let i = 0; i < padding; i++) {\n      line += ' ';\n    }\n    line += desc;\n    console.log(line);\n  },\n\n};\n","\nconst formatters = require('./formatters');\n\nconst red = '\\x1b[31m%s\\x1b[0m';\n\n// Product a test outcome report\nmodule.exports = function produceTestReport({ keyPath, limit, successes, errors }) {\n\n  const now = new Date().toJSON();\n  const dateStr = now.substr(0, 10) + ' ' + now.substr(11, 8);\n\n  formatters.verticalSpace(2);\n  formatters.horizontalLine();\n  formatters.verticalSpace(1);\n  formatters.centered(keyPath.toUpperCase());\n  formatters.centered('TEST REPORT');\n  formatters.centered(dateStr);\n  formatters.verticalSpace(2);\n  formatters.centered(`Total Tests --> ${String(limit).padStart(3, ' ')}`);\n  formatters.centered(`       Pass --> ${String(successes).padStart(3, ' ')}`);\n  formatters.centered(`       Fail --> ${String(errors.length).padStart(3, ' ')}`);\n  formatters.verticalSpace(2);\n\n  // If there are errors, print them in detail\n  if (errors.length > 0) {\n    formatters.verticalSpace(1);\n    formatters.horizontalLine();\n    formatters.centered('ERROR DETAILS');\n    formatters.horizontalLine();\n    formatters.verticalSpace(1);\n    console.group();\n    console.group();\n    errors.forEach(testError => {\n      const { folderPath, fileName, counterAsText, name, error } = testError;\n      const groupName = `${folderPath}${fileName}`;\n      console.group(groupName);\n      console.log('');\n      console.log(red, `${counterAsText} - ${name}`);\n      const { actual, expected } = error;\n      console.dir({ actual }, { colors: true, depth: null });\n      console.dir({ expected }, { colors: true, depth: null });\n      console.log('');\n      console.groupEnd(groupName);\n    });\n    console.groupEnd();\n    console.groupEnd();\n  }\n  formatters.horizontalLine();\n  formatters.horizontalLine();\n  formatters.verticalSpace(2);\n\n};\n\n","\nconst countTests = require('./countTests');\nconst produceTestReport = require('./produceTestReport');\nconst formatters = require('./formatters');\n\nconst green = '\\x1b[32m%s\\x1b[0m';\n\n// Run all the tests, collecting the errors and successes\nmodule.exports = function runTests(keyPath, units) {\n\n  if (units.length === 0) return;\n\n  // console.clear();\n  let errors = [];\n  let successes = 0;\n  const limit = countTests(units);\n  let counter = 0;\n  let lastFolderPath = '';\n  const now = new Date().toJSON();\n  const dateStr = now.substr(0, 10) + ' ' + now.substr(11, 8);\n\n  formatters.verticalSpace(10);\n  formatters.horizontalLine();\n  formatters.horizontalLine();\n  formatters.verticalSpace(1);\n  formatters.centered(keyPath.toUpperCase());\n  formatters.centered('TEST RUNNER');\n  formatters.centered(dateStr);\n  formatters.verticalSpace(1);\n\n  const done = () => {\n    counter++;\n    successes++;\n    if (counter === limit) produceTestReport({ keyPath, limit, successes, errors });\n  };\n\n/* --------------------------------------------------------------------------------------------- */\n\n  units.forEach(testFile => {\n    const { folderPath, fileName, runnables } = testFile;\n\n    if (folderPath !== lastFolderPath) {\n      formatters.verticalSpace(2);\n      console.log(green, `  ${folderPath}`);\n      formatters.horizontalLine(green);\n      lastFolderPath = folderPath;\n    }\n\n    console.log(`  > ${fileName}`);\n\n    runnables.forEach(testItem => {\n\n      const { name, testToRun } = testItem;\n\n      try {\n        testToRun();\n        // If assert is OK then done will be called, else an error is thrown\n        done();\n\n      } catch(error) {\n        // If it throws, then it failed, so capture the error thrown and log it in red\n        counter++;\n        const counterAsText = String(counter).padStart(4, '0');\n        errors.push({\n          name,\n          error,\n          counterAsText,\n          fileName,\n          folderPath,\n        });\n        console.log('\\x1b[31m%s\\x1b[0m', `        |- ${counterAsText}   ${name}`);\n        if (counter === limit) produceTestReport({ keyPath, limit, successes, errors });\n      }\n    });\n  });\n\n};\n\n\n","\n\nconst fs = require('fs');\nconst path = require('path');\n\n// Patterns\nconst patterns = {\n  includeDir: [ '__tests__' ],\n  includeFile: [ '.test.js' ],\n  excludeDir: [ 'node_modules' ],\n};\n\n// shouldBeIncluded\nconst shouldBeIncluded = filePath => {\n  const isDirExcluded = patterns.excludeDir.reduce((acum, value) => {\n    return acum && filePath.indexOf(value) > -1;\n  }, true);\n  const isDirIncluded = patterns.includeDir.reduce((acum, value) => {\n    return acum || filePath.indexOf(value) > -1;\n  }, false);\n  const isFileIncluded = patterns.includeFile.reduce((acum, value) => {\n    return acum || filePath.indexOf(value) > -1;\n  }, false);\n  return !isDirExcluded && isDirIncluded && isFileIncluded;\n};\n\n\n// readdirAsync\nconst readdirAsync = function (dir) {\n  return new Promise((resolve, reject) => {\n    fs.readdir(dir, (err, list) => {\n      if (err) reject(err);\n      resolve(list);\n    });\n  });\n};\n\n// statAsync\nconst statAsync = function (file) {\n  return new Promise((resolve, reject) => {\n    fs.stat(file, (err, stat) => {\n      if (err) reject(err);\n      resolve(stat);\n    });\n  });\n};\n\n\n// WalkDir\nmodule.exports = function walkDir(dir) {\n  return readdirAsync(dir)\n  .then(list => {\n    return Promise.all(list.map(file => {\n      const solvedFile = path.resolve(dir, file);\n      return statAsync(solvedFile)\n      .then(stat => {\n        if (stat.isDirectory()) return walkDir(solvedFile);\n        if (shouldBeIncluded(solvedFile)) return solvedFile;\n        return [];\n      });\n    }));\n  })\n  .then(results => {\n    // flatten the array of arrays\n    return Array.prototype.concat.apply([], results);\n  })\n  .catch(console.log);\n\n};\n\n\n","\n// Dependencies\nconst getUnits = require('./utils/getUnits');\nconst runTests = require('./utils/runTests');\nconst walkDirectory = require('./utils/walkDirectory');\n\nmodule.exports.init = function (pathsObject) {\n\n  console.log('Test Runner inited ...');\n\n  Object.keys(pathsObject).map(keyPath => {\n\n    const homePath = pathsObject[keyPath];\n\n    return walkDirectory(homePath)\n    .then(testingFilePaths => {\n      const units = getUnits(testingFilePaths);\n      runTests(keyPath, units);\n    })\n    .catch(console.log);\n  });\n\n\n};\n\n"]}